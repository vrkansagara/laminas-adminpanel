<div class="container">
    <?php

    /**
     * Example #3: Custom format
     */

    $helper = $this->formElementErrors();
    $helper->setMessageOpenFormat('<div class="invalid-feedback">');
    //    $helper->setMessageSeparatorString('</div><div class="invalid-feedback">');
    $helper->setMessageCloseString('</div>');
    $this->headTitle()->prepend('Contact'); ?>
    <section class="contact">
        <h2>Contact Me</h2>

        <p>
            Feel free to contact me. Please note, however, that I likely will not
            respond to recruiters, nor to questions that could be asked in public
            forums.
        </p>

        <?php if ($this->error) : ?>
            <p class="error">
                There were one or more isues with your submission. Please correct them as
                indicated below.
            </p>
        <?php endif ?>

        <?php
        $form = $this->form;
        $form->prepare();
        $form->setAttribute('action', $this->url('contact/process'));
        $form->setAttribute('method', 'post');

        echo $this->form()->openTag($form);
        ?>
        <div class="form-group">
            <?php echo $this->formLabel($form->get('from')); ?>
            <?php
            echo $this->formInput($form->get('from'));
            echo $this->formElementErrors($form->get('from'), ['class' => 'invalid-feedback']);
            ?>
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        <div class="form-group">
            <?php echo $this->formLabel($form->get('subject')); ?>

            <?php
            echo $this->formInput($form->get('subject'));
            echo $this->formElementErrors($form->get('subject'), ['class' => 'invalid-feedback']);
            ?>
        </div>

        <div class="form-group">
            <?php echo $this->formLabel($form->get('body')); ?>

            <?php
            echo $this->formTextarea($form->get('body'));
            echo $this->formElementErrors($form->get('body'), ['class' => 'invalid-feedback']);
            ?>
        </div>

        <div class="form-group">
            <?php echo $this->formLabel($form->get('captcha')); ?>
            <?php
            echo $this->formCaptcha($form->get('captcha'));
            echo $this->formElementErrors($form->get('captcha'), ['class' => 'invalid-feedback']);
            ?>
        </div>

        <?php
        echo $this->formElement($form->get('csrf'));
        echo $this->formInput($form->get('Send'));
        echo $this->formElementErrors($form->get('Send'), ['class' => 'invalid-feedback']);
        ?>
        <?php echo $this->form()->closeTag() ?>
    </section>
</div>


<script>
    window.onload = function () {
        $("#contact").each(function () {
            $(this).validate({
                errorElement: 'span',
                errorClass: 'invalid-feedback',

                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length ||
                        element.prop('type') === 'checkbox' || element.prop('type') === 'radio') {
                        error.insertAfter(element.parent());
                        // else just place the validation message immediately after the input
                    } else {
                        error.insertAfter(element);
                    }
                },
                highlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-valid').addClass('is-invalid'); // add the Bootstrap error class to the control group
                },


                unhighlight: function (element) {
                    $(element).closest('.form-control').removeClass('is-invalid').addClass('is-valid');
                },

                success: function (element) {
                    debugger
                    $(element).closest('.form-control').removeClass('is-invalid').addClass('is-valid'); // remove the Boostrap error class from the control group
                },

                focusInvalid: false, // do not focus the last invalid input

                rules: {
                    "from": {"laravelValidation": [["Required", [], "The email field is required.", true], ["String", [], "The email must be a string.", false]]},
                    "body": {"laravelValidation": [["Required", [], "The email field ishhhhhhh required.", false], ["String", [], "The email must be a string.", false]]},
                }
            });
        })
    }
</script>